#!/usr/bin/env python

import distutils.spawn
import io
import os
import subprocess
import sys

if distutils.spawn.find_executable('puppet') \
    and distutils.spawn.find_executable('hiera'):
    sys.exit(os.EX_OK)

PUPPETLABS_SOURCES = '''
deb http://apt.puppetlabs.com precise main
deb-src http://apt.puppetlabs.com precise main'''

PUPPETLABS_PREFS = '''
# Puppetlabs packages (e.g. hiera) would attempt to install a puppet 3.x
# or later release (which is not available in precise) if not pinned here
Package: puppet puppet-common
Pin: version 2.7.26-*
Pin-Priority: 501

# See https://issues.adblockplus.org/ticket/3706#comment:4
Package: facter
Pin: version 1.*
Pin-Priority: 501'''

PUPPETLABS_GPG_KEY = '''
-----BEGIN PGP PUBLIC KEY BLOCK-----
Version: GnuPG v1

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
6KsiZO+N+Iya3B4D68s6xxQS3xJn
=Q9x6
-----END PGP PUBLIC KEY BLOCK-----
'''

add_key_process = subprocess.Popen(['apt-key', 'add', '-'], stdin=subprocess.PIPE)
add_key_process.communicate(PUPPETLABS_GPG_KEY)

with io.open('/etc/apt/sources.list.d/puppetlabs.list', 'wb') as handle:
    handle.write(PUPPETLABS_SOURCES)

with io.open('/etc/apt/preferences.d/puppetlabs', 'wb') as handle:
    handle.write(PUPPETLABS_PREFS)

subprocess.check_call(['apt-get', '-y', 'update'])
subprocess.check_call(['apt-get', '-y', 'install',
                       '-o', 'Dpkg::Options::=--force-overwrite',
                       'puppet', 'puppet-common', 'hiera-puppet'])

if not os.path.exists('/etc/puppet/hiera.yaml'):
    realpath = os.path.realpath(__file__)
    dirname = os.path.dirname(realpath)
    config = os.path.join(dirname, 'hiera.yaml')
    if os.path.exists(config):
        os.symlink(config, '/etc/puppet/hiera.yaml')
