#!/usr/bin/env python

import os, re, subprocess, sys

def extract_data(type, vnstat_output):
  match = re.search(r"%s\s*([\d\.]*) (.bit/s)" % type, vnstat_output)
  if not match:
    print "Unable to extract values from '%s'" % vnstat_output
    sys.exit(1)

  value = float(match.group(1))
  unit = match.group(2)
  return (value, unit)

def calculate_bits(value, unit):
  if unit == "Mbit/s":
    value *= 1000000
  elif unit == "kbit/s":
    value *= 1000
  return int(value)

if __name__ == "__main__":
  if len(sys.argv) != 3:
    script_name = os.path.basename(sys.argv[0])
    print "Usage: %s WARN CRIT" % script_name
    sys.exit(0)

  (warn, crit) = sys.argv[1:3]
  warn = int(sys.argv[1])
  crit = int(sys.argv[2])

  vnstat_output = subprocess.check_output(["vnstat", "-tr"])
  (rx, rx_unit) = extract_data("rx", vnstat_output)
  (tx, tx_unit) = extract_data("tx", vnstat_output)
  status = "rx %s %s tx %s %s" % (rx, rx_unit, tx, tx_unit)

  rx = calculate_bits(rx, rx_unit)
  tx = calculate_bits(tx, tx_unit)
  perfdata = "rx=%s;%s;%s tx=%s;%s;%s" % (rx, warn, crit, tx, warn, crit)

  output = "%s|%s" % (status, perfdata)

  if rx >= crit or tx >= crit:
    print "CRITICAL - " + output
    sys.exit(2)

  if rx >= warn or tx >= warn:
    print "WARNING - " + output
    sys.exit(1)

  print "OK - " + output
